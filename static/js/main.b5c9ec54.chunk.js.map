{"version":3,"sources":["components/InputBox/InputBox.js","components/Word/Word.js","components/WordBox/WordBox.js","components/App/App.js","serviceWorker.js","index.js"],"names":["InputBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","str","target","value","substr","setState","val","checkWord","state","react_default","a","createElement","className","type","onChange","React","Component","Word","wordClass","currentWord","index","correct","word","WordBox","words","length","map","object","i","components_Word_Word","key","App","generateNewSong","console","log","newCurrentSong","data","Math","floor","random","tempWords","lyrics","split","startIndex","size","lowercaseOnly","toLowerCase","punctuationAllowed","replace","push","currentSong","incorrect","changeLowercaseOnly","changePunctuationAllowed","changeTextSize","Number","guess","correctBool","newWords","wrongAllowed","_this2","title","artist","components_WordBox_WordBox","components_InputBox_InputBox","onClick","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5c9ec54.chunk.js","sourcesContent":["import React from \"react\";\nimport './InputBox.css';\n\nclass InputBox extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            val: \"\"\n        }\n    }\n    handleChange = e => {\n        let str = e.target.value;\n        if (str.substr(-1) !== ' '){\n            this.setState({val: str});\n        }\n        else{\n            this.props.checkWord(this.state.val);\n            this.setState({val: \"\"});\n        }\n    }\n    render(){\n        return(\n            <div className=\"input-box-container\">\n                <input className=\"input-box-input\" type=\"text\" value={this.state.val} onChange={this.handleChange} />\n                <span className=\"input-box-border input-box-bottom\"></span>\n                <span className=\"input-box-border input-box-right\"></span>\n                <span className=\"input-box-border input-box-top\"></span>\n                <span className=\"input-box-border input-box-left\"></span>\n            </div>\n        );\n    }\n}\n\nexport default InputBox;","import React from \"react\";\n\nclass Word extends React.Component {\n    render(){\n        let wordClass = \"\";\n        if (this.props.currentWord === this.props.index){\n            wordClass = \"word-current\";\n        }\n        else if (this.props.currentWord > this.props.index){\n            if (this.props.correct){\n                wordClass = \"word-correct\";\n            }\n            else{\n                wordClass = \"word-incorrect\";\n            }\n        }\n        return (\n            <span className={wordClass}>{this.props.word} </span>\n        )\n    }\n}\n\nexport default Word;","import React from \"react\";\nimport './WordBox.css';\nimport Word from '../Word/Word';\n\nclass WordBox extends React.Component {\n    render(){\n        if (this.props.words.length <= 0){\n            return (\n                <div className=\"word-box-container\">\n                    Something's wrong. No song loaded.\n                </div>\n            )\n        }\n        return(\n            <div className=\"word-box-container\">\n                {\n                    this.props.words.map((object, i) => {\n                        return (\n                            <Word key={i} index={i} currentWord={this.props.currentWord} word={object.word} correct={object.correct} />\n                        )\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default WordBox;","import React, { Component } from 'react';\nimport './App.css';\nimport InputBox from '../InputBox/InputBox';\nimport WordBox from '../WordBox/WordBox';\nimport data from '../../data.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSong: data[Math.floor(Math.random() * data.length)],\n      currentWord: 0,\n      correct: 0,\n      incorrect: 0,\n      size: 100,\n      lowercaseOnly: false,\n      punctuationAllowed: true,\n      wrongAllowed: true,\n      words: []\n    }\n    let tempWords = this.state.currentSong.lyrics.split(\" \");\n    let startIndex = Math.floor(Math.random() * (tempWords.length-100));\n    for (let i = startIndex; i < startIndex + this.state.size; i++){\n      this.state.words.push(\n        {\n          \"word\": tempWords[i],\n          \"correct\": false\n        }\n      )\n    }\n  }\n  generateNewSong = () => {\n    console.log(this.state)\n    let newCurrentSong = data[Math.floor(Math.random() * data.length)];\n    let tempWords = newCurrentSong.lyrics.split(\" \");\n    let startIndex = Math.floor(Math.random() * (tempWords.length-100));\n    let words = []\n    for (let i = startIndex; i < startIndex + this.state.size; i++){\n      let word = tempWords[i];\n      if (this.state.lowercaseOnly){\n        word = word.toLowerCase();\n      }\n      if (!this.state.punctuationAllowed){\n        word = word.replace(/[.,!?]/g,\"\");\n      }\n      words.push(\n        {\n          \"word\": word,\n          \"correct\": false\n        }\n      )\n    }\n    this.setState({\n      currentSong: newCurrentSong,\n      words: words,\n      currentWord: 0,\n      correct: 0,\n      incorrect: 0,\n    })\n  }\n  changeLowercaseOnly = () => {\n    this.setState({lowercaseOnly: !this.state.lowercaseOnly}, () => this.generateNewSong()); // required bc. state change is async\n  }\n  changePunctuationAllowed = () => {\n    this.setState({punctuationAllowed: !this.state.punctuationAllowed}, () => this.generateNewSong()); // required bc. state change is async\n  }\n  changeTextSize = e => {\n    this.setState({size: Number(e.target.value)}, () => this.generateNewSong()); // required bc. state change is async\n  }\n  checkWord = guess => {\n    if (this.state.lowercaseOnly){\n      guess = guess.toLowerCase();\n    }\n    if (this.state.correct + this.state.incorrect < this.state.size){\n      let correctBool = true;\n      if (guess !== this.state.words[this.state.currentWord].word){\n        correctBool = false;\n        this.setState({incorrect : this.state.incorrect + 1})\n      }\n      else{\n        this.setState({correct : this.state.correct + 1})\n      }\n      let newWords = this.state.words;\n      newWords[this.state.currentWord].correct = correctBool;\n      this.setState({\n        currentWord: this.state.currentWord + 1,\n        words: newWords\n      });\n    }\n  }\n  render(){\n    return (\n      <div className=\"app\">\n        <div className=\"app-container\">\n          <h1 className=\"text-tight\">i don't got no type</h1>\n          <h4 className=\"text-tight\">a typing game focused on rap lyrics</h4>\n          <hr className=\"divider\" />\n          <div>\n            <span className=\"input-group\">\n              <input\n                type=\"checkbox\"\n                onChange={this.changeLowercaseOnly}\n              />\n              case insensitive\n            </span>{\" \"}\n            <span className=\"input-group\">\n              <input\n                type=\"checkbox\"\n                onChange={this.changePunctuationAllowed}\n              />\n              no punctuation\n            </span>{\" \"}\n            <span className=\"input-group\">\n              <select value={this.state.size} onChange={this.changeTextSize}>\n                <option value=\"10\">10</option>\n                <option value=\"25\">25</option>\n                <option value=\"50\">50</option>\n                <option value=\"100\">100</option>\n                <option value=\"250\">250</option>\n              </select>\n              {\" \"} length\n            </span>\n          </div>\n          <div className=\"row\">\n            <div className=\"col text-left\">\n              {this.state.currentSong.title} - {this.state.currentSong.artist}\n            </div>\n            <div className=\"col text-right\">\n              <div>\n                <span className=\"word-correct\">{this.state.correct}</span>/\n                <span className=\"word-incorrect\">{this.state.incorrect}</span>/\n                {this.state.size}\n              </div>\n            </div>\n          </div>\n          <WordBox words={this.state.words} currentWord={this.state.currentWord} />\n          <InputBox checkWord={guess => this.checkWord(guess)} />\n          <button className=\"button\" onClick={() => this.generateNewSong()}>restart</button>\n          <hr className=\"divider\" />\n          <footer className=\"footer\">\n            <p>\n              made with &lt;3 by <a href=\"https://matthewwang.me/\" target=\"_blank\" rel=\"noopener noreferrer\">matt</a> on <a href=\"https://github.com/malsf21/i-dont-got-no-type\" target=\"_blank\" rel=\"noopener noreferrer\">github</a>\n            </p>\n            <p>\n              lyrics from <a href=\"https://genius.com/\" target=\"_blank\" rel=\"noopener noreferrer\">genius</a>\n            </p>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}